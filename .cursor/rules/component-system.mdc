---
description: 
globs: 
alwaysApply: false
---
# 电路组件系统指南

## 概述

组件系统是物理电学实验仿真软件的核心，定义了所有电路元件的行为和视觉表现。该系统基于PyQt6的图形项功能构建，支持交互式操作和实时仿真。

## 核心文件

- [components.py](mdc:components.py) - 所有电路组件的定义和实现

## 组件类层次结构

```
                ┌──────────────┐
                │  QGraphicsItem │
                └───────┬───────┘
                        │
                ┌───────▼───────┐
                │   Component   │
                └───────┬───────┘
                        │
      ┌─────────┬───────┼───────┬─────────┐
┌─────▼─────┐ ┌─▼─┐ ┌───▼───┐ ┌─▼─┐   ┌───▼───┐
│ 电阻器    │ │开关│ │电源   │ │灯泡│   │其他元件│
└───────────┘ └───┘ └───────┘ └───┘   └───────┘
```

## 主要类与组件

### 组件基类

- `Component` 类：所有组件的抽象基类
  - 定义在 [components.py](mdc:components.py) 中
  - 继承自 `QGraphicsItem`
  - 处理组件的通用属性和行为

### 连接系统

- `ConnectionPoint` 类：表示组件上的连接点
  - 定义在 [components.py](mdc:components.py) 中
  - 处理与导线的连接逻辑

- `Wire` 类：表示连接组件的导线
  - 定义在 [components.py](mdc:components.py) 中
  - 管理连接路径和端点状态

### 电路计算

- `Circuit` 类：整个电路的模型
  - 定义在 [components.py](mdc:components.py) 中
  - 使用修正节点分析法(MNA)求解电路

## 组件的生命周期

1. **创建**：通过GUI拖放或编程方式实例化
2. **配置**：设置位置、属性和连接点
3. **连接**：通过Wire与其他组件相连
4. **仿真**：在Circuit.calculate_circuit中计算电气属性
5. **更新**：视觉状态根据计算结果更新
6. **销毁**：从场景中移除并清理连接

## 组件属性系统

每个组件维护一个属性字典，包含特定组件的参数：

- 电阻器：`电阻值`(Ω)
- 滑动变阻器：`最大电阻值`, `当前电阻值`, `滑动位置`
- 电源：`电压值`(V)
- 开关：`状态`(布尔值)
- 灯泡：`电阻值`, `额定电压`, `亮度`

## 组件绘制系统

每个组件类实现了`paint`方法，负责：

1. 根据组件类型绘制特定图形
2. 显示组件名称和参数
3. 反映组件当前状态（如开关闭合/断开）
4. 处理选中状态的视觉效果

## 组件交互

组件支持多种交互模式：

- 拖动：移动组件位置
- 右键菜单：访问属性编辑和删除功能
- 双击：打开属性对话框
- 选择：高亮显示组件

## 序列化与反序列化

组件系统支持将电路保存到JSON文件并重新加载：

- `Component.to_dict()`: 将组件转换为可序列化字典
- `Component.from_dict()`: 从字典重建组件
- `Circuit.to_dict()`: 保存整个电路结构
- `Circuit.from_dict()`: 重建整个电路

## 扩展组件系统

要添加新的组件类型：

1. 在 [components.py](mdc:components.py) 中继承 `Component` 类
2. 实现特定的 `paint` 方法定义视觉外观
3. 定义组件特有的属性和方法
4. 在 `MainWindow` 中添加对应的UI元素

